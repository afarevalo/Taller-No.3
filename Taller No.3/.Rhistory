R.version.string
# Instalar y cargar las bibliotecas necesarias
install.packages("sf")
install.packages("ggplot2")
install.packages("readxl")
install.packages("dplyr")
# Cargar los datos desde un archivo Excel
bog <- read_excel("1. Datos/Consolidado.xlsx",
sheet = "Base")
library(dplyr)
library(sf)
library(ggplot2)
library(readxl)
# Cargar los datos desde un archivo Excel
bog <- read_excel("1. Datos/Consolidado.xlsx",
sheet = "Base")
# Separar las coordenadas de la columna 'geometry'
# Suponiendo que 'geometry' es una lista de coordenadas
bog <- bog %>%
mutate(
lon = sapply(geometry, function(x) x[1]),
lat = sapply(geometry, function(x) x[2])
)
# Separar las coordenadas de la columna 'geometry'
bog <- bog %>%
mutate(
lon = sapply(geometry, function(x) x[1]),
lat = sapply(geometry, function(x) x[2])
)
# Verificar que 'lon' y 'lat' están correctamente extraídas
head(bog)
# Convertir las coordenadas en un objeto sf
bog <- st_as_sf(bog, coords = c("lon", "lat"), crs = 4326)
library(sf)
library(ggplot2)
library(readxl)
# Cargar los datos desde un archivo Excel
bog <- read_excel("1. Datos/Consolidado.xlsx",
sheet = "Base")
# Separar las coordenadas de la columna 'geometry'
bog <- bog %>%
mutate(
lon = sapply(geometry, function(x) ifelse(is.null(x), NA, x[1])),
lat = sapply(geometry, function(x) ifelse(is.null(x), NA, x[2]))
)
# Verificar que 'lon' y 'lat' están correctamente extraídas
head(bog)
# Eliminar filas con valores NA en 'lon' o 'lat'
bog <- bog %>% filter(!is.na(lon) & !is.na(lat))
# Convertir las coordenadas en un objeto sf
bog <- st_as_sf(bog, coords = c("lon", "lat"), crs = 4326)
# Crear el mapa
p <- ggplot(data = bog) +
geom_sf(aes(fill = price), size = 0.3, col = NA) +
scale_fill_gradient(low = "yellow", high = "red", name = "Precio de la vivienda") +
theme_minimal()
# Mostrar el gráfico
print(p)
# Limpiar el entorno
rm(list = ls())
library(dplyr)
library(sf)
library(ggplot2)
library(readxl)
# Cargar los datos desde un archivo Excel
bog <- read_excel("1. Datos/Consolidado.xlsx",
sheet = "Base")
# Mostrar las primeras filas para verificar la estructura
head(bog)
# Revisar la estructura de la columna 'geometry'
str(bog$geometry)
# Separar las coordenadas de la columna 'geometry'
bog <- bog %>%
mutate(
lon = sapply(geometry, function(x) ifelse(length(x) == 2, x[1], NA)),
lat = sapply(geometry, function(x) ifelse(length(x) == 2, x[2], NA))
)
# Verificar que 'lon' y 'lat' están correctamente extraídas
head(bog)
# Eliminar filas con valores NA en 'lon' o 'lat'
bog <- bog %>% filter(!is.na(lon) & !is.na(lat))
# Convertir las coordenadas en un objeto sf
bog <- st_as_sf(bog, coords = c("lon", "lat"), crs = 4326)
# Crear el mapa
p <- ggplot(data = bog) +
geom_sf(aes(fill = price), size = 0.3, col = NA) +
scale_fill_gradient(low = "yellow", high = "red", name = "Precio de la vivienda") +
theme_minimal()
# Mostrar el gráfico
print(p)
# Instalar y cargar las bibliotecas necesarias
#install.packages("sf")
#install.packages("ggplot2")
#install.packages("readxl")
#install.packages("dplyr")
# Limpiar el entorno
rm(list = ls())
library(dplyr)
library(sf)
library(ggplot2)
library(readxl)
# Cargar los datos desde un archivo Excel
bog <- read_excel("1. Datos/Consolidado.xlsx",
sheet = "Base")
#View(bog)
library(ggplot2)
library(sf)
library(dplyr)
# Transformar coordenadas
bog <- bog %>%
mutate(lat = lat / 10^7, lon = lon / 10^7)
## initial configuration
if (!require("pacman")) install.packages("pacman") # Isntalar pacman (sino está instalada)
require(pacman) # llamar pacman
## llamar y/o instalar librerias
p_load(tidyverse,rio,
viridis, ## paletas de colores
sf, ## datos espaciales
leaflet, ## visualizaciones
tmaptools, ## geocodificar
ggsn, ## map scale bar
tidycensus) ## packages with census data
## import data
bog = import("input/block_median_housing_value_bog.rds")
## initial configuration
if (!require("pacman")) install.packages("pacman") # Isntalar pacman (sino está instalada)
require(pacman) # llamar pacman
## llamar y/o instalar librerias
p_load(tidyverse,rio,
viridis, ## paletas de colores
sf, ## datos espaciales
leaflet, ## visualizaciones
tmaptools, ## geocodificar
ggsn, ## map scale bar
tidycensus) ## packages with census data
## import data
bog = import("input/block_median_housing_value_bog.rds")
## import data
bog = import("C:/Users/windows/Downloads/Curso/clase-02-main-clase_02/clase-02-main-clase_02/clase_02/input/block_median_housing_value_bog.rds")
library(sf)
library(sf)
library(ggplot2)
# Importar datos
bog <- readRDS("input/block_median_housing_value_bog.rds")
# Convertir a objeto sf si no lo es
if (!inherits(bog, "sf")) {
bog <- st_as_sf(bog)
}
# Asegurarse de que la columna de geometría está correctamente identificada
st_geometry(bog) <- bog$geometry
# Plotear el mapa
p <- ggplot(data = bog) +
geom_sf(mapping = aes(fill = q_price), size = 0.3, col = NA) +
scale_fill_manual(values = c("yellow", "#FF9900", "#FF6600", "#CC0000", "#990000"),
name = "Valor mediano\n del metro cuadrado") +
theme_minimal()
# Mostrar el gráfico
print(p)
##=== plot map ===##
p = ggplot(data=bog) + geom_sf(mapping = aes(fill=q_price) , size=0.3 , col=NA)  +
scale_fill_manual(values=c("yellow","#FF9900","#FF6600","#CC0000","#990000"),
name="Valor mediano\n del metro cuadrado")
p
# Plotear el mapa
p <- ggplot(data = bog) +
geom_sf(mapping = aes(fill = q_price), size = 0.3, col = NA) +
scale_fill_manual(values = c("yellow", "#FF9900", "#FF6600", "#CC0000", "#990000"),
name = "Valor mediano\n del metro cuadrado") +
theme_minimal()
# Mostrar el gráfico
print(p)
##=== plot map ===##
p = ggplot(data=bog) + geom_sf(mapping = aes(fill=q_price) , size=0.3 , col=NA)  +
scale_fill_manual(values=c("yellow","#FF9900","#FF6600","#CC0000","#990000"),
name="Valor mediano\n del metro cuadrado")
p
## add theme and labels
p = p + theme_bw() + labs(x="",y="")
p
## add scalebar and north symbol
p = p + north(data=bog , location="topleft") +
scalebar(data=bog , dist=5 , dist_unit="km" , transform=T , model="WGS84")
p
## save plot
ggsave(plot=p , filename="output/bog_price_block.pdf" , width=6.5 , height=8)
## plot
ggplot(bog, aes(x=dist_CBD/1000, y=price_surface_median/1000000)) +
geom_point(shape=1) + geom_smooth(method="lm") +
theme_bw() + labs(x="Distancía al centro de negocios de la ciudad (kilómetros)",
y="Valor mediano del metro cuadrado (millones)")
## save plot
ggsave(filename="output/bog_dist_cbd.png" , width=6.5 , height=7)
View(bog)
# Cargar los datos desde un archivo Excel
bog <- read_excel("1. Datos/Consolidado.xlsx",
sheet = "Base")
View(bog)
# Cargar librerías
library(sf)
library(ggplot2)
library(dplyr)  # Para la manipulación de datos
# Importar datos (asegúrate de cambiar la ruta al archivo correcto)
bog <- readRDS("C:/Users/windows/Downloads/Curso/clase-02-main-clase_02/clase_02/input/block_median_housing_value_bog.rds")
# Cargar los datos desde un archivo Excel
bog <- read_excel("1. Datos/Consolidado.xlsx",
sheet = "Base")
# Verificar las columnas y tipos de datos
str(bog)
# Transformar la columna 'geometry' de caracteres a números
bog <- bog %>%
mutate(geometry = gsub("c\\(|\\)", "", geometry)) %>%  # Eliminar "c(" y ")"
separate(geometry, into = c("lon", "lat"), sep = ", ") %>%  # Separar en 'lon' y 'lat'
mutate(
lon = as.numeric(lon),
lat = as.numeric(lat),
lon = lon / 10^6,
lat = lat / 10^6
)
# Convertir a objeto sf
bog <- st_as_sf(bog, coords = c("lon", "lat"), crs = 4326)
# Plotear el mapa con las casas disponibles
p <- ggplot(data = bog) +
geom_sf(aes(geometry = geometry, fill = q_price), color = "black", size = 0.1) +
scale_fill_gradient(low = "yellow", high = "red", name = "Valor mediano\n del metro cuadrado") +
theme_minimal() +
labs(title = "Mapa de Bogotá con precios de viviendas")
# Mostrar el gráfico
print(p)
# Limpiar el entorno
rm(list = ls())
library(dplyr)
library(sf)
library(ggplot2)
library(readxl)
# Cargar los datos desde un archivo Excel
bog <- read_excel("1. Datos/Consolidado.xlsx",
sheet = "Base")
# Verificar las columnas y tipos de datos
str(bog)
# Transformar la columna 'geometry' de caracteres a números
bog <- bog %>%
mutate(geometry = gsub("c\\(|\\)", "", geometry)) %>%
separate(geometry, into = c("lon", "lat"), sep = ", ") %>%
mutate(
lon = as.numeric(lon),
lat = as.numeric(lat),
lon = lon / 10^6,
lat = lat / 10^6
)
# Convertir a objeto sf
bog <- st_as_sf(bog, coords = c("lon", "lat"), crs = 4326)
# Plotear el mapa con las casas disponibles
p <- ggplot(data = bog) +
geom_sf(aes(geometry = geometry, fill = price), color = "black", size = 0.1) +
scale_fill_gradient(low = "yellow", high = "red", name = "Valor mediano\n del metro cuadrado") +
theme_minimal() +
labs(title = "Mapa de Bogotá con precios de viviendas")
# Mostrar el gráfico
print(p)
# Limpiar el entorno
rm(list = ls())
library(dplyr)
library(sf)
library(ggplot2)
library(readxl)
# Cargar los datos desde un archivo Excel
bog <- read_excel("1. Datos/Consolidado.xlsx",
sheet = "Base")
# Verificar las columnas y tipos de datos
str(bog)
# Transformar la columna 'geometry' de caracteres a números
bog <- bog %>%
mutate(geometry = gsub("c\\(|\\)", "", geometry)) %>%
separate(geometry, into = c("lon", "lat"), sep = ", ") %>%
mutate(
lon = as.numeric(lon),
lat = as.numeric(lat)
)
# Verificar si las coordenadas están en la escala correcta
summary(bog$lon)
summary(bog$lat)
# Si las coordenadas están en una escala incorrecta (por ejemplo, demasiado grandes), dividirlas por 10^6
bog <- bog %>%
mutate(
lon = ifelse(abs(lon) > 180, lon / 10^6, lon),
lat = ifelse(abs(lat) > 90, lat / 10^6, lat)
)
# Convertir a objeto sf
bog <- st_as_sf(bog, coords = c("lon", "lat"), crs = 4326)
# Plotear el mapa con las casas disponibles
p <- ggplot(data = bog) +
geom_sf(aes(fill = price), color = "black", size = 0.1) +
scale_fill_gradient(low = "yellow", high = "red", name = "Valor mediano\n del metro cuadrado") +
theme_minimal() +
labs(title = "Mapa de Bogotá con precios de viviendas")
# Mostrar el gráfico
print(p)
# Limpiar el entorno
rm(list = ls())
library(dplyr)
library(sf)
library(ggplot2)
library(readxl)
# Cargar los datos desde un archivo Excel
bog <- read_excel("1. Datos/Consolidado.xlsx",
sheet = "Base")
# Verificar las columnas y tipos de datos
str(bog)
# Verificar las columnas y tipos de datos
str(bog)
# Transformar la columna 'geometry' de caracteres a números
bog <- bog %>%
mutate(geometry = gsub("c\\(|\\)", "", geometry)) %>%
separate(geometry, into = c("lon", "lat"), sep = ", ") %>%
mutate(
lon = as.numeric(lon),
lat = as.numeric(lat)
)
# Convertir a objeto sf
bog <- st_as_sf(bog, coords = c("lon", "lat"), crs = 4326)
# Plotear el mapa con las casas disponibles
p <- ggplot(data = bog) +
geom_sf(aes(fill = price), color = "black", size = 0.1) +
scale_fill_gradient(low = "yellow", high = "red", name = "Valor mediano\n del metro cuadrado") +
theme_minimal() +
labs(title = "Mapa de Bogotá con precios de viviendas")
# Mostrar el gráfico
print(p)
# Limpiar el entorno
rm(list = ls())
library(dplyr)
library(sf)
library(ggplot2)
library(readxl)
# Cargar los datos desde un archivo Excel
bog <- read_excel("1. Datos/Consolidado.xlsx",
sheet = "Base")
# Verificar las columnas y tipos de datos
str(bog)
# Transformar la columna 'geometry' de caracteres a números
bog <- bog %>%
mutate(geometry = gsub("c\\(|\\)", "", geometry)) %>%
separate(geometry, into = c("lon", "lat"), sep = ", ") %>%
mutate(
lon = as.numeric(lon),
lat = as.numeric(lat)
)
# Verificar si 'price' está presente y tiene valores correctos
summary(bog$price)
# Convertir a objeto sf
bog_sf <- st_as_sf(bog, coords = c("lon", "lat"), crs = 4326, remove = FALSE)
# Plotear el mapa con las casas disponibles
p <- ggplot(data = bog_sf) +
geom_sf(aes(fill = price), color = "black", size = 0.1) +
scale_fill_gradient(low = "yellow", high = "red", name = "Valor mediano\n del metro cuadrado") +
theme_minimal() +
labs(title = "Mapa de Bogotá con precios de viviendas")
# Mostrar el gráfico
print(p)
# Limpiar el entorno
rm(list = ls())
library(dplyr)
library(sf)
library(ggplot2)
library(readxl)
# Cargar los datos desde un archivo Excel
bog <- read_excel("1. Datos/Consolidado.xlsx",
sheet = "Base")
# Verificar las columnas y tipos de datos
str(bog)
# Transformar la columna 'geometry' de caracteres a números
bog <- bog %>%
mutate(geometry = gsub("c\\(|\\)", "", geometry)) %>%
separate(geometry, into = c("lon", "lat"), sep = ", ") %>%
mutate(
lon = as.numeric(lon),
lat = as.numeric(lat)
)
# Verificar si 'price' está presente y tiene valores correctos
summary(bog$price)
# Convertir a objeto sf
bog_sf <- st_as_sf(bog, coords = c("lon", "lat"), crs = 4326, remove = FALSE)
# Plotear el mapa con las casas disponibles
p <- ggplot(data = bog_sf) +
geom_sf(aes(fill = price), color = "black", size = 0.1) +
scale_fill_gradient(low = "yellow", high = "red", name = "Valor mediano\n del metro cuadrado") +
theme_minimal() +
labs(title = "Mapa de Bogotá con precios de viviendas") +
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5)
)
# Mostrar el gráfico
print(p)
# Importar datos
bog <- readRDS("input/block_median_housing_value_bog.rds")
## import data
bog = import("C:/Users/windows/Downloads/Curso/clase-02-main-clase_02/clase-02-main-clase_02/clase_02/input/block_median_housing_value_bog.rds")
library(sf)
library(ggplot2)
# Convertir a objeto sf si no lo es
if (!inherits(bog, "sf")) {
bog <- st_as_sf(bog)
}
# Asegurarse de que la columna de geometría está correctamente identificada
st_geometry(bog) <- bog$geometry
# Plotear el mapa
p <- ggplot(data = bog) +
geom_sf(mapping = aes(fill = q_price), size = 0.3, col = NA) +
scale_fill_manual(values = c("yellow", "#FF9900", "#FF6600", "#CC0000", "#990000"),
name = "Valor mediano\n del metro cuadrado") +
theme_minimal()
# Mostrar el gráfico
print(p)
View(bog)
View(bog[[5]][[1]])
# Cargar las librerías necesarias
library(readr)
library(writexl)
# Cargar las librerías necesarias
library(readr)
library(writexl)
# Escribir los datos en un archivo Excel (.xlsx)
write_xlsx(bog, "bog.xlsx")  # Esto creará un archivo llamado "bog.xlsx" en tu directorio de trabajo actual
# Escribir los datos en un archivo Excel (.xlsx)
write_xlsx(bog, "bog.xlsx")  # Esto creará un archivo llamado "bog.xlsx" en tu directorio de trabajo actual
setwd("C:/Users/windows/Downloads/Curso/clase-02-main-clase_02/clase-02-main-clase_02/clase_02/input")
# Escribir los datos en un archivo Excel (.xlsx)
write_xlsx(bog, "bog.xlsx")  # Esto creará un archivo llamado "bog.xlsx" en tu directorio de trabajo actual
# Mostrar el gráfico
print(p)
## import data
bog = import("C:/Users/windows/Documents/GitHub/Problem_Set_1/Taller-No.3/Taller No.3/1. Datos/Value_bog.rds")
library(sf)
library(ggplot2)
# Convertir a objeto sf si no lo es
if (!inherits(bog, "sf")) {
bog <- st_as_sf(bog)
}
# Asegurarse de que la columna de geometría está correctamente identificada
st_geometry(bog) <- bog$geometry
# Plotear el mapa
p <- ggplot(data = bog) +
geom_sf(mapping = aes(fill = q_price), size = 0.3, col = NA) +
scale_fill_manual(values = c("yellow", "#FF9900", "#FF6600", "#CC0000", "#990000"),
name = "Valor mediano\n del metro cuadrado") +
theme_minimal()
# Mostrar el gráfico
print(p)
##=== plot map ===##
p = ggplot(data=bog) + geom_sf(mapping = aes(fill=q_price) , size=0.3 , col=NA)  +
scale_fill_manual(values=c("yellow","#FF9900","#FF6600","#CC0000","#990000"),
name="Valor mediano\n del metro cuadrado")
p
## add theme and labels
p = p + theme_bw() + labs(x="",y="")
p
## add scalebar and north symbol
p = p + north(data=bog , location="topleft") +
scalebar(data=bog , dist=5 , dist_unit="km" , transform=T , model="WGS84")
p
if (!require("pacman")) install.packages("pacman") # Isntalar pacman (sino está instalada)
require(pacman) # llamar pacman
## llamar y/o instalar librerias
p_load(tidyverse,rio,
viridis, ## paletas de colores
sf, ## datos espaciales
leaflet, ## visualizaciones
tmaptools, ## geocodificar
ggsn, ## map scale bar
tidycensus) ## packages with census data
# Limpiar el entorno
rm(list = ls())
## llamar y/o instalar librerias
p_load(tidyverse,rio,
viridis, ## paletas de colores
sf, ## datos espaciales
leaflet, ## visualizaciones
tmaptools, ## geocodificar
ggsn, ## map scale bar
tidycensus) ## packages with census data
library(dplyr)
library(sf)
library(ggplot2)
library(readxl)
# Cargar los datos desde un archivo Excel
bog <- read_excel("1. Datos/Consolidado.xlsx",
sheet = "Base")
